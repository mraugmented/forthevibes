// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id // Clerk user ID
  name          String?
  email         String?      @unique
  image         String?
  username      String?      @unique
  bio           String?
  githubUrl     String?
  websiteUrl    String?
  twitterUrl    String?
  linkedinUrl   String?
  youtubeUrl    String?
  vibeScore     Int          @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  projects      Project[]
  stars         Star[]
  vibes         Vibe[]
  comments      Comment[]
  devUpdates    DevUpdate[]
  followers     Follow[]     @relation("Following")
  following     Follow[]     @relation("Followers")
}

model Project {
  id           String       @id @default(cuid())
  title        String
  description  String
  demoUrl      String?
  githubUrl    String?
  imageUrl     String?
  tags         String?      // JSON array stored as string
  techStack    String?      // JSON array stored as string
  featured     Boolean      @default(false)
  published    Boolean      @default(true)
  views        Int          @default(0)
  vibeScore    Int          @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  stars        Star[]
  vibes        Vibe[]
  comments     Comment[]
  devUpdates   DevUpdate[]

  @@index([createdAt])
  @@index([userId])
  @@index([vibeScore])
}

model Star {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([projectId])
  @@index([userId])
}

model Vibe {
  id        String   @id @default(cuid())
  type      String   // 'fire', 'sparkle', 'rocket', 'inspired', 'mind-blown'
  userId    String
  projectId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId, type])
  @@index([projectId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([userId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Analytics {
  id            String   @id @default(cuid())
  date          DateTime @default(now())
  totalUsers    Int      @default(0)
  totalProjects Int      @default(0)
  totalVibes    Int      @default(0)
  totalComments Int      @default(0)
  activeUsers   Int      @default(0)

  @@index([date])
}

model DevUpdate {
  id        String   @id @default(cuid())
  title     String
  content   String
  type      String   @default("update") // 'update', 'feature', 'bugfix', 'announcement'
  projectId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([userId])
  @@index([createdAt])
}
